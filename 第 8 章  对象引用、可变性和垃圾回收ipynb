{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"第 8 章  对象引用、可变性和垃圾回收ipynb","provenance":[],"collapsed_sections":["_JaEwbWZkuw1","94pNnj0T5hnL","al513nGUiIPI","9QTOMum8ka4P","aXtx8pdLR21S","gyjV0V_6jICt","ASYRIzyYqIyM","-ZJ7qIfwq8HW","dt9iqRo6r1yb","eTyhU-7byI_0"],"authorship_tag":"ABX9TyNopYbObZfJUwhcshjgJZut"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"NJQAJciFjzAO","colab_type":"code","outputId":"14367bdb-14cf-4656-faf8-ba02ef9bd38a","executionInfo":{"status":"ok","timestamp":1586317531275,"user_tz":-480,"elapsed":24100,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["# Mount Google Driver\n","from google.colab import drive # import drive from google colab\n","\n","ROOT = \"/content/drive\"     # default location for the drive\n","drive.mount(ROOT)           # we mount the google drive at /content/drive\n","# change to clrs directionary\n","%cd \"/content/drive/My Drive/Colab Notebooks/fluent_python_notes\""],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n","/content/drive/My Drive/Colab Notebooks/fluent_python_notes\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Edg1uN5QkImT","colab_type":"code","outputId":"990a9b94-4f06-483c-9e3b-fbe2627e19c5","executionInfo":{"status":"ok","timestamp":1586303870563,"user_tz":-480,"elapsed":4518,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["%mkdir ch8\n","!touch ch8/__init__.py"],"execution_count":0,"outputs":[{"output_type":"stream","text":["mkdir: cannot create directory ‘ch8’: File exists\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"a8PWt_L45NDk","colab_type":"code","colab":{}},"source":["import imp"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_JaEwbWZkuw1","colab_type":"text"},"source":["## 8.1 变量不是盒子"]},{"cell_type":"markdown","metadata":{"id":"hGQec50klWVs","colab_type":"text"},"source":["- 人们经常使用“变量是盒子”这样的比喻，但是这有碍于理解面向对象语言中的引用式变量\n","- Python 变量为引用式变量，因此最好把它们理解为附加在对象上的标注"]},{"cell_type":"markdown","metadata":{"id":"YaTrLKBmlhEk","colab_type":"text"},"source":["###### 示例 8-1　变量 a 和 b 引用同一个列表，而不是那个列表的副本"]},{"cell_type":"code","metadata":{"id":"LC9WXEHalo8D","colab_type":"code","outputId":"19ec9699-51e7-4d00-c9c5-c64840c06da2","executionInfo":{"status":"ok","timestamp":1586245346234,"user_tz":-480,"elapsed":919,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = [1, 2, 3]\n","b = a\n","a.append(4)\n","b"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"1qscbz4ylx0k","colab_type":"text"},"source":["- <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200407155614.png width=600>"]},{"cell_type":"markdown","metadata":{"id":"RG5CS73cpArh","colab_type":"text"},"source":["###### 示例 8-2 创建对象之后才会把变量分配给对象"]},{"cell_type":"code","metadata":{"id":"uk3BhPFepHaZ","colab_type":"code","colab":{}},"source":["class Gizmo:\n","  def __init__(self):\n","    print(\"Gizmo id: %d\" % id(self))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Str1ICpip0uT","colab_type":"code","outputId":"b8a73079-4d5a-4820-df3a-1b58ef9f9a24","executionInfo":{"status":"ok","timestamp":1587103323331,"user_tz":-480,"elapsed":1041,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["x = Gizmo()"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Gizmo id: 139674107269752\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5y4kY425qW0s","colab_type":"code","outputId":"4ee97547-8026-418c-e6c8-60eb9d011558","executionInfo":{"status":"error","timestamp":1587103323804,"user_tz":-480,"elapsed":1501,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":182}},"source":["y = Gizmo() * 10  # 将 gizmo 用于乘法运算会出错，但是会先创建对象"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Gizmo id: 139674107270144\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-a846b112874f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGizmo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m10\u001b[0m  \u001b[0;31m# 将 gizmo 用于乘法运算会出错，但是会先创建对象\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for *: 'Gizmo' and 'int'"]}]},{"cell_type":"code","metadata":{"id":"HtnxHTF81KSg","colab_type":"code","outputId":"3a99ce62-487c-49e8-ddd4-c098e301b548","executionInfo":{"status":"ok","timestamp":1587103332000,"user_tz":-480,"elapsed":984,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["\", \".join([item for item in dir() if not item.startswith(\"_\")])  # 不会创建变量 y，因为在对赋值语句的右边进行求值时抛出了异常"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Gizmo, In, Out, exit, get_ipython, quit, x'"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"94pNnj0T5hnL","colab_type":"text"},"source":["## 8.2 标识、相等性和别名"]},{"cell_type":"markdown","metadata":{"id":"mFwOF3unF9en","colab_type":"text"},"source":["- 每个变量都有标识、类型和值\n","- 对象一旦创建，它的标识绝不会变；可以把标识理解为对象在内存中的地址\n","- `is` 运算符比较两个对象的标识\n","- `id()` 函数返回对象标识的整数表示\n","  - 对象 ID 的真正意义在不同的实现中有所不同\n","    - 在 CPython 中，`id()` 返回对象的内存地址\n","    - 但在其他 Python 解释器中可能是别的值\n","  - 关键是，ID 一定是唯一的数值标注，而且在对象的生命周期中绝不会变"]},{"cell_type":"markdown","metadata":{"id":"QxCW9X1tFJx3","colab_type":"text"},"source":["###### 示例 8-3　charles 和 lewis 指代同一个对象"]},{"cell_type":"code","metadata":{"id":"gABlv8yaFNed","colab_type":"code","outputId":"f278798f-3c3e-48fc-8a94-085804d97d45","executionInfo":{"status":"ok","timestamp":1586303958072,"user_tz":-480,"elapsed":791,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["charles = {'name': 'Charles L. Dodgson', 'born': 1832}\n","lewis = charles  # lewis 是 charles 的别名\n","lewis is charles"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"oFXOTa6GFXjE","colab_type":"code","outputId":"c1467002-e100-4a40-ccba-41165da8e651","executionInfo":{"status":"ok","timestamp":1586304029898,"user_tz":-480,"elapsed":1012,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["id(charles), id(lewis)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(140169600493104, 140169600493104)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"chAgdo3FFpB2","colab_type":"text"},"source":["###### 示例 8-4　alex 与 charles 比较的结果是相等，但 alex 不是 charles"]},{"cell_type":"code","metadata":{"id":"JIiCPIY-GY8v","colab_type":"code","outputId":"3362ce3b-270c-4c2a-c976-7205fb783ff9","executionInfo":{"status":"ok","timestamp":1586304252019,"user_tz":-480,"elapsed":2189,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["alex = {'name': 'Charles L. Dodgson', 'born': 1832}\n","alex == charles  # 比较两个对象，结果相等。背后调用的是 dict 的 __eq__ 方法"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"G308lDGlGe-N","colab_type":"code","outputId":"ce8edff5-30e4-458f-fb47-f4f5d847e5a7","executionInfo":{"status":"ok","timestamp":1586304311241,"user_tz":-480,"elapsed":996,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["alex is not charles "],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"aoalyquTGtqI","colab_type":"text"},"source":["- 示意图\n","  - <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200408080702.png width=600>"]},{"cell_type":"markdown","metadata":{"id":"FAoIOP10HRbk","colab_type":"text"},"source":["### 8.2.1 在 `==` 和 `is` 之间选择"]},{"cell_type":"markdown","metadata":{"id":"fBkUa1R9HvlL","colab_type":"text"},"source":["- `==` 运算符比较两个对象的值（对象中保存的数据）\n","- is 比较对象的标识\n","- 通常，我们关注的是值，而不是标识，因此 Python 代码中 `==` 出现的频率比 `is` 高"]},{"cell_type":"markdown","metadata":{"id":"hnjDpLwCIDtG","colab_type":"text"},"source":["***\n","- 在变量和单例值之间比较时，应该使用 is\n","- 最常使用 is检查变量绑定的值是不是 None"]},{"cell_type":"code","metadata":{"id":"7OZwlsLQIL7h","colab_type":"code","outputId":"7a0b7f38-37cd-461e-bce9-d58defff14e6","executionInfo":{"status":"ok","timestamp":1586304720674,"user_tz":-480,"elapsed":807,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["x = None\n","x is None"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"drJX51JAIRuz","colab_type":"code","outputId":"8995073c-80b6-4d46-8937-54078f48eca1","executionInfo":{"status":"ok","timestamp":1586304730790,"user_tz":-480,"elapsed":754,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["x = 1\n","x is not None"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"W5ynLrCmIUKe","colab_type":"text"},"source":["***\n","- `is` 运算符比 `==` 速度快\n","  - 因为 `is` 不能重载，所以 Python 不用寻找并调用特殊方法，而是直接比较两个整数 ID\n","  - 而 `a == b` 是语法糖，等同于`a.__eq__(b)`\n","    - 继承自 object 的 `__eq__` 方法比较两个对象的 ID，结果与 `is` 一样\n","    - 但是多数内置类型使用更有意义的方式覆盖了 `__eq__`方法，会考虑对象属性的值\n","    - 相等性测试可能涉及大量处理工作，例如，比较大型集合或嵌套层级深的结构时"]},{"cell_type":"markdown","metadata":{"id":"TOhCUUoPI6lb","colab_type":"text"},"source":["### 8.2.2 元组的相对不可变性"]},{"cell_type":"markdown","metadata":{"id":"Sn9kJUeXJAM_","colab_type":"text"},"source":["- 元组与多数 Python 集合（列表、字典、集，等等）一样，保存的是对象的引用\n","  - 如果引用的元素是可变的，即便元组本身不可变，元素依然可变。\n","  - 即元组的不可变性其实是指 `tuple` 数据结构的物理内1容（即保存的引用）不可变，与引用的对象无关\n","  - 由于元组的此特性，因此有些元组不可散列\n","- `str`、`bytes` 和 `array.array` 等单一类型序列是扁平的，它们保存的不是引用，而是在连续的内存中保存数据本身（字符、字节和数字）"]},{"cell_type":"markdown","metadata":{"id":"LNGjBi9ChE8B","colab_type":"text"},"source":["###### 示例 8-5　一开始，t1 和 t2 相等，但是修改 t1 中的一个可变元素后，二者不相等了"]},{"cell_type":"code","metadata":{"id":"c7VuR2g_hRFi","colab_type":"code","outputId":"501bdbfe-e81c-4b1a-96be-bad488e035ac","executionInfo":{"status":"ok","timestamp":1586311343521,"user_tz":-480,"elapsed":1169,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t1 = (1, 2, [30, 40])\n","t2 = (1, 2, [30, 40])\n","t1 == t2  # t1 与 t2 是不同的对象，但是两者相等"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"ECHAeKpchYCT","colab_type":"code","outputId":"1923b59f-9fab-448c-d9ce-86d918b542db","executionInfo":{"status":"ok","timestamp":1586311358660,"user_tz":-480,"elapsed":4313,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["id(t1[-1])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["139940199905480"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"vGKmQE77hlGR","colab_type":"code","colab":{}},"source":["t1[-1].append(99)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aPQs5mbjhqYF","colab_type":"code","outputId":"85f04880-1edb-414f-e2ee-380336fa55f0","executionInfo":{"status":"ok","timestamp":1586311378380,"user_tz":-480,"elapsed":1067,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, [30, 40, 99])"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"s9GYv4l5hq1x","colab_type":"code","outputId":"74e5cc94-f5f4-48f8-b292-99c52f14beeb","executionInfo":{"status":"ok","timestamp":1586311394911,"user_tz":-480,"elapsed":1476,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["id(t1[-1])  # t1[-1] 的标识没变，但值发生了改变"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["139940199905480"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"a2w8exQ5hvBc","colab_type":"code","outputId":"80cb2737-b8bb-45fe-f139-85fa18338404","executionInfo":{"status":"ok","timestamp":1586311435648,"user_tz":-480,"elapsed":1330,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t1 == t2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"al513nGUiIPI","colab_type":"text"},"source":["## 8.3 默认作浅复制"]},{"cell_type":"markdown","metadata":{"id":"edZuBkp3j3ot","colab_type":"text"},"source":["- 复制列表（或多数内置的可变集合）最简单的方式是使用内置的类型构造方法"]},{"cell_type":"code","metadata":{"id":"EOYtWnOvjbnh","colab_type":"code","outputId":"63854f2b-29a1-4770-d282-dab140c844d4","executionInfo":{"status":"ok","timestamp":1586311945504,"user_tz":-480,"elapsed":1536,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["l1 = [3, [55, 44], (7, 8, 9)]\n","l2 = list(l1)\n","l2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3, [55, 44], (7, 8, 9)]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"uGoUF2VKj1HF","colab_type":"code","outputId":"a34a936a-a6e5-4769-afa6-fafdae5ac766","executionInfo":{"status":"ok","timestamp":1586311977631,"user_tz":-480,"elapsed":1265,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["l1 == l2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"i8Jcjxfpj85C","colab_type":"code","outputId":"afd64dfb-5848-4d22-fe70-7183b4967543","executionInfo":{"status":"ok","timestamp":1586311980814,"user_tz":-480,"elapsed":2039,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["l1 is l2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"jHJg7CM_j92P","colab_type":"text"},"source":["- 对列表和其他可变序列来说，还能使用简洁的 `l3 = l1[:]` 语句创建副本"]},{"cell_type":"code","metadata":{"id":"TOzHL4RrkFmR","colab_type":"code","outputId":"4450134f-7057-4f90-d8f4-3c67b59d2ff8","executionInfo":{"status":"ok","timestamp":1586312029781,"user_tz":-480,"elapsed":2252,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["l3 = l1[:]\n","l3"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3, [55, 44], (7, 8, 9)]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"sv4SSAikkJ1F","colab_type":"text"},"source":["- 构造方法或 `[:]` 做的是浅复制（即复制了最外层容器，副本中的元素是源容器中元素的引用）\n","  - 如果所有元素都是不可变的，那么这样没有问题，还能节省内存\n","  - 但是，如果有可变的元素，可能就会导致意想不到的问题"]},{"cell_type":"markdown","metadata":{"id":"9QTOMum8ka4P","colab_type":"text"},"source":["###### 示例 8-6　为一个包含另一个列表的列表做浅复制；把这段代码复制粘贴到 Python Tutor 网站中，要查看动画效果"]},{"cell_type":"code","metadata":{"id":"-f2TWxKIkkGi","colab_type":"code","outputId":"270f9b65-878d-43b0-b0bf-9323936f530d","executionInfo":{"status":"ok","timestamp":1586312452613,"user_tz":-480,"elapsed":1551,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["l1  = [3, [66, 55, 44], (7, 8, 9)]\n","l2 = list(l1)  # 1\n","l1.append(100)  # 2\n","l1[1].remove(55)  # 3\n","print(\"l1\", l1)\n","print(\"l2\", l2)\n","l2[1] += [33, 22]  # 4\n","l2[2] += (10, 11)  # 5\n","print('l1:', l1)\n","print('l2:', l2)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["l1 [3, [66, 44], (7, 8, 9), 100]\n","l2 [3, [66, 44], (7, 8, 9)]\n","l1: [3, [66, 44, 33, 22], (7, 8, 9), 100]\n","l2: [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rwef8loVlxOW","colab_type":"text"},"source":["1. `l2` 是 `l1` 的浅复制\n","  - <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200408102255.png width=500>\n","\n"]},{"cell_type":"markdown","metadata":{"id":"UZBS6qGyl7U0","colab_type":"text"},"source":["2. 将 100 追加到 `l1` 中， 对 `l2` 没有影响\n","  - <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200408102509.png width=500>"]},{"cell_type":"markdown","metadata":{"id":"8Wf6xMirmiby","colab_type":"text"},"source":["3. 把内部列表 `l1[1]` 中的 55 删除。这对 `l2` 有影响，因为 `l2[1]` 绑定的列表与 `l1[1]` 是同一个\n","  - <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200408102859.png width=500>"]},{"cell_type":"markdown","metadata":{"id":"B6duUMaunfuJ","colab_type":"text"},"source":["4. 对可变的对象来说，如 `l2[1]` 引用的列表，`+=` 运算符就地修改列表。这次修改在 `l1[1]` 中也有体现，因为它是 `l2[1]` 的别名\n","  - <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200408103121.png width=500>"]},{"cell_type":"markdown","metadata":{"id":"tsWwxT_Tn9Nf","colab_type":"text"},"source":["5. 对元组来说，+= 运算符创建一个新元组，然后重新绑定给变量l2[2]。这等同于 l2[2] = l2[2] + (10, 11)。现在，l1 和 l2 中最后位置上的元组不是同一个对象\n","  - <img src=https://raw.githubusercontent.com/Lijunjie9502/PicBed/master/20200408103322.png width=500>"]},{"cell_type":"markdown","metadata":{"id":"M8YHR35koejI","colab_type":"text"},"source":["### 为任意对象做深复制和浅复制"]},{"cell_type":"markdown","metadata":{"id":"dhgd3U1sqqc_","colab_type":"text"},"source":["- `copy` 模块提供的 `deepcopy` 和 `copy` 函数能为任意对象做深复制（即副本不共享内部对象的引用）和浅复制"]},{"cell_type":"markdown","metadata":{"id":"OPajTD97tyTR","colab_type":"text"},"source":["###### 示例 8-8　校车乘客在途中上车和下车"]},{"cell_type":"code","metadata":{"id":"CWj0dKdMt2oj","colab_type":"code","outputId":"5aa479a4-8b7d-4820-b792-46616e3c3874","executionInfo":{"status":"ok","timestamp":1586318432564,"user_tz":-480,"elapsed":1142,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%%writefile ch8/bus.py\n","\n","class Bus:\n","\n","  def __init__(self, passengers = None):\n","    if passengers is None:\n","      self.passengers =  []\n","    else:\n","      self.passengers = list(passengers)\n","\n","  def pick(self, name):\n","    self.passengers.append(name)\n","\n","  def drop(self, name):\n","    self.passengers.remove(name)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Overwriting ch8/bus.py\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BxVqRaZa5A-Y","colab_type":"code","colab":{}},"source":["import ch8.bus\n","imp.reload(ch8.bus)\n","from ch8.bus import Bus\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"o_LtIij35TFi","colab_type":"code","outputId":"e4b27fe7-c77b-4d1b-effb-3d1122f3e908","executionInfo":{"status":"ok","timestamp":1586318480101,"user_tz":-480,"elapsed":1368,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import copy\n","bus1 = Bus(['Alice', 'Bill', 'Claire', 'David'])\n","bus2 = copy.copy(bus1)\n","bus3 = copy.deepcopy(bus1)\n","id(bus1), id(bus2), id(bus3)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(139940180405160, 139940180405272, 139940180405216)"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"zexUs_dz7mE_","colab_type":"code","outputId":"6633db77-a4bd-4156-c882-e09a6747d3a5","executionInfo":{"status":"ok","timestamp":1586318480102,"user_tz":-480,"elapsed":1168,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus1.drop('Bill')\n","bus2.passengers  # bus1 中的 bill 下车后， bus2 中也没有他了"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Alice', 'Claire', 'David']"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"UuW34fQn8Y8V","colab_type":"code","outputId":"9e3328d2-19ac-41cb-e9eb-3958079af5ab","executionInfo":{"status":"ok","timestamp":1586321260622,"user_tz":-480,"elapsed":1125,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)  # 因为 bus2 是 bus1 的浅复制版本，因此两都共享一个列表对象"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(139940180388424, 139940180388424, 139940180512456)"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"AKot5sC5HXuB","colab_type":"code","outputId":"0d31d700-fd70-4757-903f-de035c3b186d","executionInfo":{"status":"ok","timestamp":1586321343766,"user_tz":-480,"elapsed":1254,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus3.passengers  # bus3 是 bus1 的深复制副本，因此其 passengers 属性指向另外一个列表"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Alice', 'Bill', 'Claire', 'David']"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"Iwg8L8qCHr_R","colab_type":"text"},"source":["#### 循环引用"]},{"cell_type":"markdown","metadata":{"id":"i0hTTfJeQ0mk","colab_type":"text"},"source":["- 深复制不是件简单的事。如果对象有循环引用，那么这个朴素的算法会进入无限循环\n","- `deepcopy` 函数会记住已经复制的对象，因此能优雅地处理循环引用\n","- 深复制有时可能太深了。例如，对象可能会引用不该复制的外部资源或单例值\n","  - 可以实现特殊方法 `__copy__() `和`__deepcopy__()`，控制`copy`和`deepcopy`的行为，"]},{"cell_type":"markdown","metadata":{"id":"BYwm_Dh0Q3nl","colab_type":"text"},"source":["###### 示例 8-10　循环引用：`b` 引用 `a`，然后追加到 `a` 中；`deepcopy` 会想办法复制 `a`"]},{"cell_type":"code","metadata":{"id":"HpBxS6krRGN8","colab_type":"code","outputId":"2792e862-3976-4ad2-8e09-a8e7baef446e","executionInfo":{"status":"ok","timestamp":1586323845012,"user_tz":-480,"elapsed":1245,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = [10, 20]\n","b = [a, 30]\n","a.append(b)\n","a"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[10, 20, [[...], 30]]"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"wLA2xR2RROfn","colab_type":"code","outputId":"a122ccb2-2138-497c-bb9c-d8d133233ccc","executionInfo":{"status":"ok","timestamp":1586324009549,"user_tz":-480,"elapsed":540,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from copy import deepcopy\n","c = deepcopy(a)\n","c"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[10, 20, [[...], 30]]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"aXtx8pdLR21S","colab_type":"text"},"source":["## 8.4 函数的参数作为引用时"]},{"cell_type":"markdown","metadata":{"id":"jxqx0XQBVHpP","colab_type":"text"},"source":["- Python 唯一支持的参数传递模式是共享传参（call by sharing）\n","- 共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名\n","- 函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的标识（即不能把一个对象替换成另一个对象）"]},{"cell_type":"markdown","metadata":{"id":"jSCrB6vMVdae","colab_type":"text"},"source":["###### 示例 8-11　函数可能会修改接收到的任何可变对象"]},{"cell_type":"code","metadata":{"id":"LoUjOSBbWith","colab_type":"code","colab":{}},"source":["def f(a, b):\n","  a += b\n","  return a"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2bhTWrFMWowS","colab_type":"code","outputId":"aa2049d0-0dbd-48fa-bbe5-0af98ff22243","executionInfo":{"status":"ok","timestamp":1586325457445,"user_tz":-480,"elapsed":1198,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["x, y = 1, 2\n","f(x, y)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"GBFulyUKWraz","colab_type":"code","outputId":"e4a5b525-f590-4730-d62c-26a8482ece7b","executionInfo":{"status":"ok","timestamp":1586325457447,"user_tz":-480,"elapsed":907,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["x, y  # 数字 x 没变"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2)"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"GjpfElN4Wstz","colab_type":"code","outputId":"0239dcd4-a69a-4f86-fc84-7851fb7122c6","executionInfo":{"status":"ok","timestamp":1586325464420,"user_tz":-480,"elapsed":1045,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a, b = [1, 2], [3, 4]\n","f(a, b)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4]"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"md1fHcGOXYec","colab_type":"code","outputId":"206b89a0-d7a6-4fb2-f94e-7857a497fa43","executionInfo":{"status":"ok","timestamp":1586325508878,"user_tz":-480,"elapsed":1055,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a, b  # 列表 a 发生了改变"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([1, 2, 3, 4], [3, 4])"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"Cu6DCki0Xawf","colab_type":"code","outputId":"6cfb050f-05c1-4e14-8c88-c1a5e8706e3c","executionInfo":{"status":"ok","timestamp":1586325534697,"user_tz":-480,"elapsed":1075,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t, u = (10, 20), (30, 40)\n","f(t, u)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10, 20, 30, 40)"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"TAAxfWNfXrMj","colab_type":"code","outputId":"19c82289-3d7d-4819-cddc-aff34d8209fb","executionInfo":{"status":"ok","timestamp":1586325556226,"user_tz":-480,"elapsed":1145,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t, u  # 元组 t 没有发生改变"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((10, 20), (30, 40))"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"UNo7JlD1XwdH","colab_type":"text"},"source":["### 8.4.1 不要使用可变类型作为参数的默认值"]},{"cell_type":"markdown","metadata":{"id":"oK0XXSnBch8V","colab_type":"text"},"source":["- 默认值在定义函数时计算（通 常在加载模块时），因此默认值变成了函数对象的属性。\n","- 如果默认值是可变对象，而且修改了它的值，那么后续的函数调用都会受到影响\n","- 由于可变默认值存在的这个问题，通常使用 `None` 作为接收可变值的参数的默认值"]},{"cell_type":"markdown","metadata":{"id":"wtQkeJyocajm","colab_type":"text"},"source":["###### 示例 8-12　一个简单的类，说明可变默认值的危险"]},{"cell_type":"markdown","metadata":{"id":"e6W3zZ5ncnOz","colab_type":"text"},"source":["- 没有指定初始乘客的 `HauntedBus` 实例会共享同一个乘客列表"]},{"cell_type":"code","metadata":{"id":"w5-ScQ_JX22I","colab_type":"code","outputId":"7a740498-5a3a-415e-a8ea-c00a61317a79","executionInfo":{"status":"ok","timestamp":1586326149865,"user_tz":-480,"elapsed":1075,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%%writefile ch8/hauntedbus.py\n","class HauntedBus:\n","  \"\"\"备受幽灵乘客折磨的校车\"\"\"\n","\n","  def __init__(self, passengers=[]):\n","    self.passengers = passengers\n","\n","  def pick(self, name):\n","    self.passengers.append(name)\n","\n","  def drop(self, name):\n","    self.passengers.remove(name)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Writing ch8/hauntedbus.py\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rFEx7k_RaBZQ","colab_type":"code","colab":{}},"source":["import ch8.hauntedbus\n","imp.reload(ch8.hauntedbus)\n","from ch8.hauntedbus import HauntedBus"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1xH_Acw9aJeE","colab_type":"code","outputId":"8d2eb9a9-6901-442b-8ff0-aafffcda0323","executionInfo":{"status":"ok","timestamp":1586326219739,"user_tz":-480,"elapsed":1158,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus1 = HauntedBus(['Alice', 'Bill'])  # 不使用默认值，不会出现问题\n","bus1.passengers"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Alice', 'Bill']"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"mDYh9jaSaScH","colab_type":"code","outputId":"6c47894d-04eb-42fa-8823-68dada48fc97","executionInfo":{"status":"ok","timestamp":1586326249994,"user_tz":-480,"elapsed":1140,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus1.pick('Charlie')\n","bus1.drop('Alice')\n","bus1.passengers"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Bill', 'Charlie']"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"F_4gmVPaaZ1P","colab_type":"code","outputId":"4b747a7e-9d62-45b4-fa11-71ffd7f93d2a","executionInfo":{"status":"ok","timestamp":1586326356676,"user_tz":-480,"elapsed":1162,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus2 = HauntedBus()  # 使用默认值\n","bus2.pick('Carrie')\n","bus2.passengers"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Carrie']"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"gTgnYNfYaz1f","colab_type":"code","outputId":"3557e85a-af78-483b-b791-f5c58976a7cc","executionInfo":{"status":"ok","timestamp":1586326387131,"user_tz":-480,"elapsed":1104,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus3 = HauntedBus()  # 继续使用默认值\n","bus3.passengers  # 默认的列表此时不为空"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Carrie']"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"HtAiJULMa6MX","colab_type":"code","outputId":"764b97d6-e674-464e-b16b-fa6148bf0885","executionInfo":{"status":"ok","timestamp":1586326456136,"user_tz":-480,"elapsed":1100,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus3.pick('Dive')  # 修改 bus3 的乘客，会影响 bus2\n","bus2.passengers"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Carrie', 'Dive']"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"EyepyGocbMK_","colab_type":"code","outputId":"ef59544d-90c7-4630-fac7-eb356868abf3","executionInfo":{"status":"ok","timestamp":1586326485210,"user_tz":-480,"elapsed":1098,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus2.passengers is bus3.passengers  # bus2.passengers 与 bus3.passengers 指向的是同一列表"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"code","metadata":{"id":"BnL7eQtybTQ9","colab_type":"code","outputId":"9cf89e2a-b160-4262-c90c-c316ec1ee836","executionInfo":{"status":"ok","timestamp":1586326586849,"user_tz":-480,"elapsed":1175,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus1.passengers  # bus1.passengers 是不同的列表"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Bill', 'Charlie']"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"markdown","metadata":{"id":"n_LwUkCZcPo4","colab_type":"text"},"source":["***\n","- 可以在 `HauntedBus.__init__ `对象的 `__defaults__`属性中查看有哪些幽灵学生"]},{"cell_type":"code","metadata":{"id":"_8HcJcv6dNe4","colab_type":"code","outputId":"f022c79a-2f26-4ee0-bb68-8e01de010d7b","executionInfo":{"status":"ok","timestamp":1586327016297,"user_tz":-480,"elapsed":895,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":612}},"source":["dir(HauntedBus.__init__)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['__annotations__',\n"," '__call__',\n"," '__class__',\n"," '__closure__',\n"," '__code__',\n"," '__defaults__',\n"," '__delattr__',\n"," '__dict__',\n"," '__dir__',\n"," '__doc__',\n"," '__eq__',\n"," '__format__',\n"," '__ge__',\n"," '__get__',\n"," '__getattribute__',\n"," '__globals__',\n"," '__gt__',\n"," '__hash__',\n"," '__init__',\n"," '__init_subclass__',\n"," '__kwdefaults__',\n"," '__le__',\n"," '__lt__',\n"," '__module__',\n"," '__name__',\n"," '__ne__',\n"," '__new__',\n"," '__qualname__',\n"," '__reduce__',\n"," '__reduce_ex__',\n"," '__repr__',\n"," '__setattr__',\n"," '__sizeof__',\n"," '__str__',\n"," '__subclasshook__']"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"dg2Df2XYdU-o","colab_type":"code","outputId":"7236ee26-2b44-464e-bd8e-0fcf9df11a34","executionInfo":{"status":"ok","timestamp":1586327043301,"user_tz":-480,"elapsed":1053,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["HauntedBus.__init__.__defaults__"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(['Carrie', 'Dive'],)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"markdown","metadata":{"id":"piFC_mvNdbiI","colab_type":"text"},"source":["- 可以验证 `bus2.passengers `是一个别名，它绑定到`HauntedBus.__init__.__defaults__ `属性的第一个元素上"]},{"cell_type":"code","metadata":{"id":"kJIu0Xp-drcQ","colab_type":"code","outputId":"94b34063-c0e3-4120-bff0-7d3a81622861","executionInfo":{"status":"ok","timestamp":1586327130379,"user_tz":-480,"elapsed":578,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["bus2.passengers is HauntedBus.__init__.__defaults__[0]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"markdown","metadata":{"id":"2uXlY4zLdw3T","colab_type":"text"},"source":["### 8.4.2 防御可变参数"]},{"cell_type":"markdown","metadata":{"id":"TWZv78fJfcL0","colab_type":"text"},"source":["- 如果定义的函数接收可变参数，应该谨慎考虑调用方是否期望修改传入的参数\n","  - 例如如果函数接收一个字典，而且在处理的过程中要修改它，那么这个副作用要不要体现到函数外部？\n","  - 具体情况应具体分析。需要函数的编写者和调用方达成共识"]},{"cell_type":"markdown","metadata":{"id":"MfVvicBXf52K","colab_type":"text"},"source":["###### 示例 8-15　一个简单的类，说明接受可变参数的风险"]},{"cell_type":"code","metadata":{"id":"wgIXjy9_gC8O","colab_type":"code","outputId":"ddda49a7-ef62-42be-e337-601de3e6f94d","executionInfo":{"status":"ok","timestamp":1586328393590,"user_tz":-480,"elapsed":1102,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%%writefile ch8/twilightbus.py\n","class TwilightBus:\n","  \"\"\"让乘客销声匿迹的校车\"\"\"\n","\n","  def __init__(self, passengers=None):\n","    self.passengers = [] if passengers is None else passengers\n","\n","  def pick(self, name):\n","    self.passengers.append(name)\n","\n","  def drop(self, name):\n","    self.passengers.remove(name)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Overwriting ch8/twilightbus.py\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"20Ksfnjdg4Gi","colab_type":"code","colab":{}},"source":["import ch8.twilightbus\n","imp.reload(ch8.twilightbus)\n","from ch8.twilightbus import TwilightBus"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TfdP0caJhJD1","colab_type":"code","outputId":"077bb7bf-df6d-493f-f547-9382b5793cf0","executionInfo":{"status":"ok","timestamp":1586328419198,"user_tz":-480,"elapsed":1065,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["basketball_team = ['Sue', 'Tina', 'Maya', 'Diana', 'Pat']\n","bus = TwilightBus(basketball_team)  # 从 TwilightBus 下车后，乘客消失了\n","bus.drop('Tina')\n","bus.drop('Pat')\n","basketball_team"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Sue', 'Maya', 'Diana']"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"markdown","metadata":{"id":"HxLEzHdwicxz","colab_type":"text"},"source":["- 此处正确的做法应该是校车自己维护乘客列表\n","- ```python\n","  def __init__(self, passengers=None):\n","    self.passengers = [] if passengers is None else list(passengers)\n","```\n","- 在内部像这样处理乘客列表，就不会影响初始化校车时传入的参数\n","  - 此外，这种处理方式还更灵活：即传给 `passengers` 参数的值可以是元组或任何其他可迭代对象\n","    - 例如 `set` 对象，甚至数据库查询结果，因为 `list` 构造方法接受任何可迭代对象"]},{"cell_type":"markdown","metadata":{"id":"gyjV0V_6jICt","colab_type":"text"},"source":["## 8.5 `del` 和垃圾回收"]},{"cell_type":"markdown","metadata":{"id":"QR0bWLFXjlyc","colab_type":"text"},"source":["- `del` 语句删除名称，而不是对象\n","- `del` 命令可能会导致对象被当作垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。\n","- 重新绑定也可能会导致对象的引用数量归零，导致对象被销毁\n","***\n","- `__del__` 特殊方法不会销毁实例，不应该在代码中调用\n","- 即将销毁实例时，Python 解释器会调用 `__del__` 方法，给实例最后的机会，释放外部资源\n","- 自己编写的代码很少需要实现 `__del__` 代码，有些 Python 新手会花时间实现，但却吃力不讨好，因为 `__del__` 很难用对\n","***\n","- 在 CPython 中，垃圾回收使用的主要算法是引用计数\n","  - 每个对象都会统计有多少引用指向自己。当引用计数归零时，对象立即就被销毁\n","    - CPython 会在对象上调用 `__del__` 方法（如果定义了），然后释放分配给对象的内存。\n","- CPython　2.0 增加了分代垃圾回收算法，用于检测引用循环中涉及的对象组——如果一组对象之间全是相互引用，即使再出色的引用方式也会导致组中的对象不可获取\n","- Python 的其他实现有更复杂的垃圾回收程序，而且不依赖引用计数，这意味着，对象的引用数量为零时可能不会立即调用 `__del__` 方法。"]},{"cell_type":"markdown","metadata":{"id":"04p1-gVfkZhV","colab_type":"text"},"source":["###### 示例 8-16　没有指向对象的引用时，监视对象生命结束时的情形"]},{"cell_type":"code","metadata":{"id":"3QDltLGCmqRc","colab_type":"code","outputId":"4973de74-d260-4eac-f851-c3a75a8a553a","executionInfo":{"status":"ok","timestamp":1586329637392,"user_tz":-480,"elapsed":1057,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["import weakref\n","s1 = {1, 2, 3}\n","s2 = s1\n","\n","\n","def bye():\n","  print('Gone  with the wind...')\n","\n","\n","ender = weakref.finalize(s1, bye)\n","ender.alive"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Gone  with the wind...\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"iI0NQa-Em-qA","colab_type":"code","outputId":"da1d5b97-6245-4832-9892-d300a6e75566","executionInfo":{"status":"ok","timestamp":1586329637907,"user_tz":-480,"elapsed":1317,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["del s1  # del 不删除对象，而是删除对象的引用\n","ender.alive"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"code","metadata":{"id":"AEAefoPjnSXA","colab_type":"code","colab":{}},"source":["s2 = 'spam'  # 重新绑定最后一个引用 s2，让 {1, 2, 3} 无法获取。对象被销毁了，调用了 bye 回调，ender.alive 的值变成了 False"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rnh0aXSAnYBd","colab_type":"code","outputId":"a8d41385-eb56-41eb-eb73-bfb6a7c849b0","executionInfo":{"status":"ok","timestamp":1586329780914,"user_tz":-480,"elapsed":1259,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["ender.alive"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"markdown","metadata":{"id":"7jXpfFvWnaGr","colab_type":"text"},"source":["## 8.6 弱引用"]},{"cell_type":"markdown","metadata":{"id":"PNO5titQn8Ig","colab_type":"text"},"source":["- 正是因为有引用，对象才会在内存中存在\n","  - 当对象的引用数量归零后，垃圾回收程序会把对象销毁\n","  - 但是，有时需要引用对象，而不让对象存在的时间超过所需时间，这经常用在缓存中\n","- 弱引用不会增加对象的引用数量\n","  - 引用的目标对象称为所指对象（referent）\n","  - 因此我们说，弱引用不会妨碍所指对象被当作垃圾回收\n","  - 弱引用在缓存应用中很有用，因为不想仅因为被缓存引用着而始终保存缓存对象"]},{"cell_type":"markdown","metadata":{"id":"w2bTBIJVor-K","colab_type":"text"},"source":["###### 示例 `8`-`17`　弱引用是可调用的对象，返回的是被引用的对象；如果所指对象不存在了，返回 `None`"]},{"cell_type":"markdown","metadata":{"id":"7Kr-GCaqojoS","colab_type":"text"},"source":["- Python 控制台会自动把 `_` 变量绑定到结果不为 `None` 的表达式结果上"]},{"cell_type":"code","metadata":{"id":"RDNQ7Y64orVH","colab_type":"code","outputId":"bf7d9675-6b6d-492f-e615-43682e366a16","executionInfo":{"status":"ok","timestamp":1586330206542,"user_tz":-480,"elapsed":1178,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import weakref\n","a_set = {0, 1}\n","wref = weakref.ref(a_set)  # 创建弱引用对象\n","wref"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<weakref at 0x7f465cbaa6d8; to 'set' at 0x7f465cc084a8>"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"code","metadata":{"id":"1R4oW_whpeid","colab_type":"code","outputId":"001ff069-89fa-40e0-df7a-519168d4be21","executionInfo":{"status":"ok","timestamp":1586330216713,"user_tz":-480,"elapsed":1057,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["wref()  # 调用 wref() 返回的是被引用的对象，{0, 1}。因为这是控制台会话，所以 {0, 1} 会绑定给 _ 变量。"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0, 1}"]},"metadata":{"tags":[]},"execution_count":89}]},{"cell_type":"code","metadata":{"id":"Hp2s6o8qpiSk","colab_type":"code","colab":{}},"source":["a_set = {2, 3, 4}  # a_set 不再指代 {0, 1} 集合，因此集合的引用数量减少了。但是 _ 变量仍然指代它"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FXSVQIxcpsao","colab_type":"code","outputId":"8f7c4e0a-aeda-43ef-e8d2-2dcb7f6fcff5","executionInfo":{"status":"ok","timestamp":1586330294535,"user_tz":-480,"elapsed":1225,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["wref()  #"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0, 1}"]},"metadata":{"tags":[]},"execution_count":92}]},{"cell_type":"code","metadata":{"id":"UI1wlvztp1Px","colab_type":"code","outputId":"5902ed6b-8470-4dcb-8b6c-66c76b00349b","executionInfo":{"status":"ok","timestamp":1586330332381,"user_tz":-480,"elapsed":1212,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["wref is None  # 计算这个表达式时，{0, 1} 存在，因此 wref() 不是 None。但是，随后 _ 绑定到结果值 False。现在 {0, 1} 没有强引用了"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"code","metadata":{"id":"boHkkr4cp-Sa","colab_type":"code","outputId":"9ac14f9e-bf5a-4d61-8d52-ba706b3596d1","executionInfo":{"status":"ok","timestamp":1586330374457,"user_tz":-480,"elapsed":1122,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["wref is None  # {1, 2} 不存在， wref 为 None"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"markdown","metadata":{"id":"ASYRIzyYqIyM","colab_type":"text"},"source":["### 8.6.1 `WeakValueDictionary` 简介"]},{"cell_type":"markdown","metadata":{"id":"LNg6Et15qYFh","colab_type":"text"},"source":["- `WeakValueDictionary` 类实现的是一种可变映射，里面的值是对象的弱引用\n","- 被引用的对象在程序中的其他地方被当作垃圾回收后，对应的键会自动从 `WeakValueDictionary` 中删除\n","- 因此，`WeakValueDictionary` 经常用于缓存"]},{"cell_type":"markdown","metadata":{"id":"-ZJ7qIfwq8HW","colab_type":"text"},"source":["###### 示例 8-18　`Cheese` 有个 `kind` 属性和标准的字符串表示形式"]},{"cell_type":"code","metadata":{"id":"FZ92Oj4nrcix","colab_type":"code","outputId":"42308a3e-c541-46f8-b4e8-e8255d6640cc","executionInfo":{"status":"ok","timestamp":1586330820980,"user_tz":-480,"elapsed":1023,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%%writefile ch8/cheese.py\n","class Cheese:\n","\n","  def __init__(self, kind):\n","    self.kind = kind\n","\n","  def __repr__(self):\n","    return 'Cheese(%r)' % self.kind"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Writing ch8/cheese.py\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dt9iqRo6r1yb","colab_type":"text"},"source":["###### 示例 8-19　顾客：“你们店里到底有没有奶酪？”"]},{"cell_type":"code","metadata":{"id":"SGkiUbPur8Ev","colab_type":"code","colab":{}},"source":["import ch8.cheese\n","imp.reload(ch8.cheese)\n","from ch8.cheese import Cheese"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OEtMy2LdsDwe","colab_type":"code","outputId":"cf3deaae-0c54-4a57-e0a9-29b33123f088","executionInfo":{"status":"ok","timestamp":1586332255273,"user_tz":-480,"elapsed":1076,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import weakref\n","stock = weakref.WeakValueDictionary()\n","catalog = [Cheese('Red Leicester'), Cheese('Tilsit'), Cheese('Brie'), Cheese('Parmesan')]\n","\n","for cheese in catalog:\n","  stock[cheese.kind] = cheese\n","\n","sorted(stock.keys())"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Brie', 'Parmesan', 'Red Leicester', 'Tilsit']"]},"metadata":{"tags":[]},"execution_count":106}]},{"cell_type":"code","metadata":{"id":"4hlO47PQwHxD","colab_type":"code","outputId":"74165509-a0b8-4c57-ea3e-7c7b5f092794","executionInfo":{"status":"ok","timestamp":1586332255779,"user_tz":-480,"elapsed":1557,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["del catalog\n","sorted(stock.keys())  # for 循环中的 cheese 是全局变量，除非被显示删除，否则会一直存在，因此 stock 中最后只剩下 Parmesam"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Parmesan']"]},"metadata":{"tags":[]},"execution_count":107}]},{"cell_type":"code","metadata":{"id":"kV5U4z3jwNz3","colab_type":"code","outputId":"1326542a-b0fe-4ac7-d8e2-02e34d717eb2","executionInfo":{"status":"ok","timestamp":1586332283040,"user_tz":-480,"elapsed":563,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["del cheese\n","sorted(stock.keys())"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[]"]},"metadata":{"tags":[]},"execution_count":108}]},{"cell_type":"markdown","metadata":{"id":"zVHkNFJZxXwM","colab_type":"text"},"source":["#### `WeakKeyDictionary()`"]},{"cell_type":"markdown","metadata":{"id":"5eZ2i1Nqxmp4","colab_type":"text"},"source":["- `WeakKeyDictionary` 的键是弱引用，可以为应用中其他部分拥有的对象附加数据\n","  - 这样就无需为对象添加属性\n","  - 对覆盖属性访问权限的对象尤其有用。"]},{"cell_type":"markdown","metadata":{"id":"eTyhU-7byI_0","colab_type":"text"},"source":["#### `WeakSet` 类"]},{"cell_type":"markdown","metadata":{"id":"20y-vhq7yUwc","colab_type":"text"},"source":["- 保存元素弱引用的集合类。元素没有强引用时，集合会把它删除。”\n","- 如果一个类需要知道所有实例，一种好的方案是创建一个 `WeakSet` 类型的类属性，保存实例的引用\n","- 如果使用常规的 `set`，实例永远不会被垃圾回收，因为类中有实例的强引用，而类存在的时间与 Python 进程一样长，除非显式删除类"]},{"cell_type":"markdown","metadata":{"id":"gLpAcyywyihQ","colab_type":"text"},"source":["### 8.6.2　弱引用的局限"]},{"cell_type":"markdown","metadata":{"id":"KlDnygYXyxlm","colab_type":"text"},"source":["- 不是每个 Python 对象都可以作为弱引用的目标（或称所指对象）。基本的 `list` 和 `dict` 实例不能作为所指对象，但是它们的子类可以解决这个问题\n","- `int` 和 `tuple` 实例不能作为弱引用的目标，它们的子类也不行\n","- 这些局限基本上是 CPython 的实现细节，在其他 Python 解释器中情况可能不一样。这些局限是内部优化导致的结果。"]},{"cell_type":"code","metadata":{"id":"x_QSHd5ky9Uo","colab_type":"code","colab":{}},"source":["class MyList(list):\n","  \"\"\"list 的子类，实例可以作为弱引用目标\"\"\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TYdQir02zFuI","colab_type":"code","colab":{}},"source":["a_list = MyList(range(10))\n","\n","wref_to_a_list = weakref.ref(a_list)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gcwr_yfWzP9K","colab_type":"text"},"source":["## 8.7 Python对不可变类型施加的把戏"]},{"cell_type":"markdown","metadata":{"id":"u9Zh5CpzzqTd","colab_type":"text"},"source":["- 对元组 `t` 来说，`t[:]` 不创建副本，而是返回同一个对象的引用。此外，`tuple(t)` 获得的也是同一个元组的引用\n","- `str`、`bytes` 和 `frozenset` 实例也有这种行为\n","  - 注意，`frozenset` 实例不是序列，因此不能使用 `fs`[:]（`fs` 是一个 `frozenset` 实例）\n","  - 但是，`fs.copy()` 具有相同的效果\n","    - 它会返回同一个对象的引用，而不是创建一个副本"]},{"cell_type":"markdown","metadata":{"id":"JPOJwPMBzw9w","colab_type":"text"},"source":["###### 示例 8-20　使用另一个元组构建元组，得到的其实是同一个元组"]},{"cell_type":"code","metadata":{"id":"01SKL98i1Fcn","colab_type":"code","outputId":"5c50d567-c71c-4df6-df8d-d7b1dd3f7ded","executionInfo":{"status":"ok","timestamp":1586333258098,"user_tz":-480,"elapsed":1375,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t1 = (1, 2, 3)\n","t2 = tuple(t1)\n","t2 is t1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":111}]},{"cell_type":"code","metadata":{"id":"xTxzx7cQ1Idx","colab_type":"code","outputId":"cbeb85d6-c22a-41d8-d00d-038fb0cb4a69","executionInfo":{"status":"ok","timestamp":1586333267257,"user_tz":-480,"elapsed":600,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t3 = t1[:]\n","t3 is t1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":112}]},{"cell_type":"markdown","metadata":{"id":"vfY0iRGl1LHk","colab_type":"text"},"source":["##### 共享字符串\n","- 共享字符串字面量是一种优化措施，称为驻留（interning）\n","  - CPython 还会在小的整数上使用这个优化措施，防止重复创建“热门”数字，如0、-1 和 42\n","  - CPython 不会驻留所有字符串和整数，驻留的条件是实现细节，而且没有文档说明\n","- 由于驻留特性，比较字符串或整数是否相等时，应该使用 `==`，而不是 `is`"]},{"cell_type":"markdown","metadata":{"id":"iiJdo1372F25","colab_type":"text"},"source":["###### 示例 8-21　字符串字面量可能会创建共享的对象"]},{"cell_type":"code","metadata":{"id":"gCXas0oc2JyR","colab_type":"code","outputId":"bfb40ae8-dd60-463f-f6a2-df48b04b0020","executionInfo":{"status":"ok","timestamp":1586334461725,"user_tz":-480,"elapsed":1240,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["t1 = (1, 2, 3)\n","t2 = (1, 2, 3)\n","t2 is t1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":113}]},{"cell_type":"code","metadata":{"id":"B1s_fgkg5uWN","colab_type":"code","outputId":"7b34c282-7039-4cf9-99fa-96dd9ef35751","executionInfo":{"status":"ok","timestamp":1586334474633,"user_tz":-480,"elapsed":2139,"user":{"displayName":"李俊杰","photoUrl":"","userId":"02952091555349143448"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["s1 = 'ABC'\n","s2 = 'ABC'\n","s1 is s2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":114}]},{"cell_type":"markdown","metadata":{"id":"YJELDNA_1dqP","colab_type":"text"},"source":["##### 不会对实际使用造成影响\n","- 本节中的例子，包括 frozenset.copy() 的行为，是“善意的谎言”，能节省内存，提升解释器的速度\n","- 但它们不会为编程带来任何麻烦，因为只有不可变类型会受到影响"]},{"cell_type":"code","metadata":{"id":"lq_fOno62E8T","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}